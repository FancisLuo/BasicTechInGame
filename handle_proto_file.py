
import os;
import re;
import sys;

target_msg_id_define_file = "D:/Workspace/RemoteWork/uw/project/Assets/GameAsset/Lua/Network/ProtoMsgIdDefine.lua.txt"
proto_msg_to_id_list = []
id_to_proto_msg_list = []

def scan_proto_file(full_proto_file_path, proto_file_name):
    print(proto_file_name)
    re_match = re.match(r"^\d+-\d+_(\w+).proto$", proto_file_name)
    proto_name = ""
    if re_match:
        # 从文件名中提取协议名
        proto_name = re_match.group(1)
        print(proto_name)
    if not proto_name.strip():
        return
    
    # 读取文件内容
    file_handle = open(full_proto_file_path, 'r+', encoding='UTF-8')
    # 读取所有行
    file_content = file_handle.readlines()
    package_name = ""
    is_msg_start = False
    msg_name = ""
    msg_id = ""


    for line_index in range(0, len(file_content)):
        line = file_content[line_index].strip().rstrip()

        if len(line) == 0:
            continue
        if "import" in line or "option java_package" in line or "option java_outer_classname" in line or "syntax =" in line:
            continue

        if line.startswith("package"):
            # 提取package
            re_package_name = re.match(r"package (\w+)\s*;", line)
            if re_package_name:
                package_name = re_package_name.group(1)

        if line.startswith("message"):
            # 提取消息名
            is_msg_start = True
            re_msg_name = re.match(r"^message (\w+) {", line)
            if re_msg_name:
                msg_name = re_msg_name.group(1)
        
        if "msgId" in line:
            # 提取消息id option (msgId) = 4601;
            re_msg_id = re.match(r"^option \(msgId\) = (\d+);", line)
            if re_msg_id:
                msg_id = re_msg_id.group(1)
        
        if line == "}":
            # 一个消息结束
            if is_msg_start:
                # 有消息开始，这里可以标识结束，并处理输出内容
                is_msg_start = False

                # 1. ProtoMsgIdDefine
                msg_to_id = "\t%s_%s\t=%s" %(proto_name, msg_name, msg_id)
                proto_msg_to_id_list.append(msg_to_id)
                # 2. MsgIdprotoDefine
                id_to_msg = "\t[%s]\t=\"%s.%s\"" %(msg_id, package_name, msg_name)
                id_to_proto_msg_list.append(id_to_msg)


def write_msg_id_defines():
    # 写入文件
    a = target_msg_id_define_file.index("Assets/GameAsset/Lua") + len("Assets/GameAsset/Lua") + 1
    classStr = target_msg_id_define_file[a: len(target_msg_id_define_file)-8]
    msg_id_define_file_handle = open(target_msg_id_define_file, 'w+', encoding='UTF-8')

    msg_id_define_file_handle.writelines("---Generated By msgid-gen-lua Do not Edit\n")
    msg_id_define_file_handle.writelines("---@class ProtoMsgIdDefine %s\n"%(classStr))
    msg_id_define_file_handle.writelines("ProtoMsgIdDefine = {\n")

    for proto_msg_id_item in proto_msg_to_id_list:
        msg_id_define_file_handle.writelines(proto_msg_id_item)
        msg_id_define_file_handle.writelines("\n")
    msg_id_define_file_handle.writelines("}\n")

    msg_id_define_file_handle.writelines("\n---@class MsgIdprotoDefine")
    msg_id_define_file_handle.writelines("\nMsgIdprotoDefine = {\n")

    for id_proto_msg_item in id_to_proto_msg_list:
        msg_id_define_file_handle.writelines(id_proto_msg_item)
        msg_id_define_file_handle.writelines("\n")
    msg_id_define_file_handle.writelines("}\n\n")
    msg_id_define_file_handle.writelines("return MsgIdprotoDefine\n")
 
    msg_id_define_file_handle.flush()
    msg_id_define_file_handle.close()
    print("gen msgId done")
    

# 扫描proto目录
def start_handle(proto_folder):
    print(proto_folder)
    # 1. 扫描目录
    files = os.listdir(proto_folder)
    for file in files:
        full_file_path = os.path.join(proto_folder, file)
        if os.path.isfile(full_file_path):
            # 只扫描proto文件，且主协议文件名为1000-2000_login
            if file.endswith(".proto"):
                pattern = re.compile(r'^\d+-\d+_\w+.proto$')
                rst = pattern.search(file)
                print(file)
                scan_proto_file(full_file_path, file)
        else:
            start_handle(full_file_path)


# 脚本入口
if __name__=="__main__":
    start_handle("D:\\Workspace\\RemoteWork\\uw\\proto")
    write_msg_id_defines()